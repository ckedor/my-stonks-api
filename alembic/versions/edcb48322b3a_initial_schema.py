"""Initial Schema

Revision ID: edcb48322b3a
Revises:
Create Date: 2025-03-26 19:51:42.329533

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "edcb48322b3a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    
    op.execute("CREATE SCHEMA IF NOT EXISTS asset")
    op.execute("CREATE SCHEMA IF NOT EXISTS market_data")
    op.execute("CREATE SCHEMA IF NOT EXISTS portfolio")
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "asset_class",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="asset",
    )
    op.create_table(
        "currency",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=3), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        schema="asset",
    )
    op.create_table(
        "etf_segment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="asset",
    )
    op.create_table(
        "fii_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="asset",
    )
    op.create_table(
        "fixed_income_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="asset",
    )
    op.create_table(
        "broker",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("cnpj", sa.String(length=18), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("cnpj"),
        schema="portfolio",
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(length=320), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="public",
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "asset_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("short_name", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("asset_class_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_class_id"],
            ["asset.asset_class.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("short_name"),
        schema="asset",
    )
    op.create_table(
        "fii_segment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("type_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["asset.fii_type.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="asset",
    )
    op.create_table(
        "index",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sa.String(length=10), nullable=False),
        sa.Column("short_name", sa.String(length=50), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("currency_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["asset.currency.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("symbol"),
        schema="market_data",
    )
    op.create_table(
        "portfolio",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )
    op.create_table(
        "asset",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ticker", sa.String(length=30), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("asset_type_id", sa.Integer(), nullable=False),
        sa.Column("currency_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_type_id"],
            ["asset.asset_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["asset.currency.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("ticker"),
        schema="asset",
    )
    op.create_table(
        "index_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("index_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("open", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.Column("close", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.Column("high", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.Column("low", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.ForeignKeyConstraint(
            ["index_id"],
            ["market_data.index.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("index_id", "date", name="uq_index_date"),
        schema="market_data",
    )
    # Tabela de categorias personalizadas por portfólio
    op.create_table(
        "custom_category",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("portfolio_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.portfolio.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )

    # Associação entre ativos e categorias
    op.create_table(
        "custom_category_assignment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("custom_category_id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["custom_category_id"],
            ["portfolio.custom_category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )
    op.create_table(
        "return_12m",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("portfolio_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("return_pct", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.portfolio.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )
    op.create_table(
        "etf",
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("segment_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["segment_id"],
            ["asset.etf_segment.id"],
        ),
        sa.PrimaryKeyConstraint("asset_id"),
        schema="asset",
    )
    op.create_table(
        "fii",
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("segment_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["segment_id"],
            ["asset.fii_segment.id"],
        ),
        sa.PrimaryKeyConstraint("asset_id"),
        schema="asset",
    )
    op.create_table(
        "fixed_income",
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("maturity_date", sa.Date(), nullable=True),
        sa.Column("fee", sa.Numeric(precision=8, scale=5), nullable=True),
        sa.Column("index_id", sa.Integer(), nullable=True),
        sa.Column("fixed_income_type_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["fixed_income_type_id"],
            ["asset.fixed_income_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["index_id"],
            ["market_data.index.id"],
        ),
        sa.PrimaryKeyConstraint("asset_id"),
        schema="asset",
    )
    op.create_table(
        "fund",
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("legal_id", sa.String(length=20), nullable=True),
        sa.Column("anbima_code", sa.String(length=12), nullable=True),
        sa.Column("anbima_code_class", sa.String(length=12), nullable=True),
        sa.Column("anbima_category", sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.PrimaryKeyConstraint("asset_id"),
        schema="asset",
    )
    op.create_table(
        "stock",
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("segment", sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.PrimaryKeyConstraint("asset_id"),
        schema="asset",
    )
    op.create_table(
        "treasury_bond_type",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        sa.UniqueConstraint("name"),
        schema="asset",
    )
    op.create_table(
        "event",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("type", sa.String(length=50), nullable=False),
        sa.Column("factor", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="asset",
    )
    op.create_table(
        "treasury_bond",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("maturity_date", sa.Date(), nullable=True),
        sa.Column("type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["asset.treasury_bond_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="asset",
    )
    op.create_table(
        "asset_price_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("open", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.Column("close", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.Column("high", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.Column("low", sa.Numeric(precision=18, scale=8), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("asset_id", "date", name="uq_asset_date"),
        schema="market_data",
    )
    op.create_table(
        "dividend",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("portfolio_id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.portfolio.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )
    op.create_table(
        "position",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("portfolio_id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("average_price", sa.Float(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.portfolio.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )
    op.create_table(
        "transaction",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("portfolio_id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("broker_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("currency_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["asset.asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["broker_id"],
            ["portfolio.broker.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.portfolio.id"],
        ),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["asset.currency.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="portfolio",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transaction", schema="portfolio")
    op.drop_table("position", schema="portfolio")
    op.drop_table("dividend", schema="portfolio")
    op.drop_table("asset_price_history", schema="market_data")
    op.drop_table("treasury_bond", schema="asset")
    op.drop_table("stock", schema="asset")
    op.drop_table("fund", schema="asset")
    op.drop_table("fixed_income", schema="asset")
    op.drop_table("fii", schema="asset")
    op.drop_table("etf", schema="asset")
    op.drop_table("return_12m", schema="portfolio")
    op.drop_table("custom_category_assignment", schema="portfolio")
    op.drop_table("custom_category", schema="portfolio")
    op.drop_table("index_history", schema="market_data")
    op.drop_table("asset", schema="asset")
    op.drop_table("portfolio", schema="portfolio")
    op.drop_table("index", schema="market_data")
    op.drop_table("fii_segment", schema="asset")
    op.drop_table("asset_type", schema="asset")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("broker", schema="portfolio")
    op.drop_table("fixed_income_type", schema="asset")
    op.drop_table("fii_type", schema="asset")
    op.drop_table("etf_segment", schema="asset")
    op.drop_table("currency", schema="asset")
    op.drop_table("asset_class", schema="asset")
    # ### end Alembic commands ###
